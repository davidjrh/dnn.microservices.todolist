// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using TodoList.API.Client;
using TodoList.API.Client.Models;

namespace TodoList.API.Client
{
    public static partial class TodoItemsExtensions
    {
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string CloseItemById(this ITodoItems operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITodoItems)s).CloseItemByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> CloseItemByIdAsync(this ITodoItems operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.CloseItemByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static TodoItem DeleteTodoItemById(this ITodoItems operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITodoItems)s).DeleteTodoItemByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<TodoItem> DeleteTodoItemByIdAsync(this ITodoItems operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<TodoList.API.Client.Models.TodoItem> result = await operations.DeleteTodoItemByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static TodoItem GetTodoItemById(this ITodoItems operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITodoItems)s).GetTodoItemByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<TodoItem> GetTodoItemByIdAsync(this ITodoItems operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<TodoList.API.Client.Models.TodoItem> result = await operations.GetTodoItemByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        public static IList<TodoItem> GetTodoItems(this ITodoItems operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITodoItems)s).GetTodoItemsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<TodoItem>> GetTodoItemsAsync(this ITodoItems operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<TodoList.API.Client.Models.TodoItem>> result = await operations.GetTodoItemsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        /// <param name='todoItem'>
        /// Required.
        /// </param>
        public static TodoItem PostTodoItemByTodoitem(this ITodoItems operations, TodoItem todoItem)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITodoItems)s).PostTodoItemByTodoitemAsync(todoItem);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the TodoList.API.Client.ITodoItems.
        /// </param>
        /// <param name='todoItem'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<TodoItem> PostTodoItemByTodoitemAsync(this ITodoItems operations, TodoItem todoItem, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<TodoList.API.Client.Models.TodoItem> result = await operations.PostTodoItemByTodoitemWithOperationResponseAsync(todoItem, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
